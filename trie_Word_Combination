#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx2,bmi,bmi2,lzcnt,popcnt")

#include <bits/stdc++.h>
using namespace std;

#define endl "\n"
#define ll long long
#define okk cerr << "ok\n";

/*
    Problem Name: Word Combinations
    Problem link: https://cses.fi/problemset/task/1731/
*/

const ll mod = 1e9 + 7;

class Trie
{
    static const int MAXN = 1000005;
    int nxt[MAXN][26]; // 26 letters
    int endCnt[MAXN];
    // int preCnt[MAXN];
    int nodeCnt;

public:
    Trie()
    {
        memset(nxt, -1, sizeof(nxt));
        memset(endCnt, 0, sizeof(endCnt));
        // memset(preCnt, 0, sizeof(preCnt));
        nodeCnt = 1; // root = 0
    }

    void insert(const string &s)
    {
        int node = 0;
        for (char ch : s)
        {
            int i = ch - 'a';
            if (nxt[node][i] == -1)
                nxt[node][i] = nodeCnt++;
            node = nxt[node][i];
            // preCnt[node]++;
        }
        endCnt[node]++;
    }

    int countEqual(int idx, const string &s, vector<ll> &dp)
    {
        if (idx == s.size())
        {
            return 1;
        }
        if (dp[idx] != -1)
        {
            return dp[idx];
        }

        dp[idx] = 0;

        int node = 0;

        for (int curIdx = idx; curIdx < s.size(); curIdx++)
        {
            int i = s[curIdx] - 'a';
            if (nxt[node][i] == -1)
            {
                return dp[idx];
            }
            node = nxt[node][i];

            if (endCnt[node])
            {
                int x = countEqual(curIdx + 1, s, dp);

                x = (endCnt[node] * x) % mod;

                dp[idx] = (dp[idx] + x) % mod;
            }
        }
        return dp[idx];
    }
};

void solve()
{
    string s;
    cin >> s;

    Trie trie;

    int n;
    cin >> n;
    vector<string> v(n);
    for (int i = 0; i < n; i++)
    {
        cin >> v[i];
        trie.insert(v[i]);
    }

    vector<ll> dp(s.size() + 5, -1);

    int x = trie.countEqual(0, s, dp);
    cout << x << endl;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cout << fixed << setprecision(6);
    cerr << fixed << setprecision(6);
    ll _T = 1;
    // cin >> _T;
    for (ll i = 1; i <= _T; i++)
    {
        // cout << "Case #" << i << ": ";
        // cerr << "\n\nCase " << i << ": \n";
        solve();
    }
    return 0;
}
